{"version":3,"sources":["components/standardboard.jsx","components/metricboard.jsx","App.js","serviceWorker.js","index.js"],"names":["Standardboard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","feet","inch","pound","standardResult","displayResult","evt","setState","defineProperty","target","name","value","weight","parseFloat","hfeet","hinch","standardBMI","Math","pow","isNaN","react_default","a","createElement","className","type","placeholder","onChange","handleTextChange","bind","onClick","calculateBMI","resetResult","style","display","Component","Metricboard","centi","kilo","meticResult","hcenti","metricBMI","App","standardboard","metricboard","showstandardboard","showmetricboard","showBox","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e453ee1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Standardboard extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            feet:'',\r\n            inch:'',\r\n            pound:'',\r\n            standardResult: '',\r\n            displayResult:'none'\r\n        }\r\n    }    \r\n\r\n    handleTextChange(evt){\r\n        this.setState({[evt.target.name]:evt.target.value})\r\n    }\r\n    calculateBMI(){\r\n        var weight = parseFloat(this.state.pound)*0.4536;\r\n        var hfeet = parseFloat(this.state.feet)*0.3048;\r\n        var hinch = parseFloat(this.state.inch)*0.0254;\r\n        var height = Math.pow((hfeet+hinch), 2);\r\n        var standardBMI=weight/height;\r\n        if(isNaN(standardBMI)){\r\n            this.setState({standardResult: \"Please enter numeric values.\", displayResult:'block'})    \r\n        }else{\r\n        this.setState({standardResult: standardBMI, displayResult:'block'})\r\n        }\r\n    }\r\n\r\n    resetResult(){\r\n        this.setState({\r\n            feet:'',\r\n            inch:'',\r\n            pound:'',\r\n            standardResult: '',\r\n            displayResult:'none'\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"Standard\">\r\n                    <div className=\"heightBlock\">\r\n                        <label>Please enter your Height</label>\r\n                        <input type=\"text\" className=\"feet\" name=\"feet\" placeholder=\"feet\" value={this.state.feet} onChange={this.handleTextChange.bind(this)}></input>\r\n                        <input type=\"text\" className=\"inch\" name=\"inch\" placeholder=\"inch\" value={this.state.inch} onChange={this.handleTextChange.bind(this)}></input>\r\n                    </div>\r\n                    <div className=\"weightBlock\">\r\n                        <label>Please enter your Weight</label>\r\n                        <input type=\"text\" className=\"pound\" name=\"pound\" placeholder=\"pound\" value={this.state.pound} onChange={this.handleTextChange.bind(this)}></input>\r\n                    </div>\r\n                    <div>\r\n                        <button className=\"btn btn-primary\" onClick={this.calculateBMI.bind(this)}>Submit</button>\r\n                        <button className=\"btn btn-primary\" onClick={this.resetResult.bind(this)}>Reset</button>\r\n                    </div>\r\n                    <div>\r\n                        <label className=\"BMIvalue\"  style={{display:this.state.displayResult}}>Result:</label>\r\n                        <label className=\"result\" style={{display:this.state.displayResult}}>{this.state.standardResult}</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Standardboard;","import React, { Component } from 'react';\r\n\r\nclass Metricboard extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            centi: '',\r\n            kilo:'',\r\n            meticResult: '',\r\n            displayResult:'none'\r\n        }\r\n    }    \r\n\r\n    handleTextChange(evt){\r\n        this.setState({[evt.target.name]:evt.target.value})\r\n    }\r\n    calculateBMI(){\r\n        var weight = parseFloat(this.state.kilo);\r\n        var hcenti = parseFloat(this.state.centi)*0.01;\r\n        var height = Math.pow((hcenti), 2);\r\n        var metricBMI=weight/height;\r\n        if(isNaN(metricBMI)){\r\n            this.setState({meticResult: \"Please enter numeric values.\", displayResult:'block'})    \r\n        }else{\r\n        this.setState({meticResult: metricBMI, displayResult:'block'})\r\n        }\r\n    }\r\n\r\n    resetResult(){\r\n        this.setState({\r\n            centi: '',\r\n            kilo:'',\r\n            meticResult: '',\r\n            displayResult:'none'\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"Metric\">\r\n                    <div className=\"heightBlock\">\r\n                        <label>Please enter your Height</label>\r\n                        <input type=\"text\" className=\"centi\" name=\"centi\" placeholder=\"centi\" value={this.state.centi} onChange={this.handleTextChange.bind(this)}></input>\r\n                    </div>\r\n                    <div className=\"weightBlock\">\r\n                        <label>Please enter your Weight</label>\r\n                        <input type=\"text\" className=\"kilo\" name=\"kilo\" placeholder=\"kilo\" value={this.state.kilo} onChange={this.handleTextChange.bind(this)}></input>\r\n                    </div>\r\n                    <div>\r\n                        <button className=\"btn btn-primary\" onClick={this.calculateBMI.bind(this)}>Submit</button>\r\n                        <button className=\"btn btn-primary\" onClick={this.resetResult.bind(this)}>Reset</button>\r\n                    </div>\r\n                    <div>\r\n                        <label className=\"BMIvalue\"  style={{display:this.state.displayResult}}>Result:</label>\r\n                        <label className=\"result\" style={{display:this.state.displayResult}}>{this.state.meticResult}</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Metricboard;","import React, { Component } from 'react';\nimport Standardboard from './components/standardboard';\nimport Metricboard from './components/metricboard';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      standardboard: 'block',\n      metricboard: 'none'\n    }\n  }\n  showstandardboard(){\n    this.setState({\n      standardboard: 'block',\n      metricboard: 'none'\n    })\n  }\n  showmetricboard(){\n    this.setState({\n      standardboard: 'none',\n      metricboard: 'block'\n    })\n  }\n\n  showBox(){\n    if(this.state.standardboard=== 'block'){\n     return  <Standardboard />\n    }else{\n      return <Metricboard />\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <button onClick={this.showstandardboard.bind(this)}>Standard board</button>\n        <button onClick={this.showmetricboard.bind(this)}>Metric board</button>\n        {this.showBox()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}